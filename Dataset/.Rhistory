Fantasy<-  data.frame(words)
Fantasy$isfant <- 1
for (i in 1:nrow(Fantasy)){
countword <- length(grep(Fantasy$words[i],gen_key$keywords[[3]]))
Fantasy$wordcount[i] <- countword
Fantasy$fantasy.weight[i] <- Fantasy$wordcount[i]/sum(Fantasy$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[4]]))
Sci_Fi<-  data.frame(words)
Sci_Fi$isscifi <-1
for (i in 1:nrow(Sci_Fi)){
countword <- length(grep(Sci_Fi$words[i],gen_key$keywords[[4]]))
Sci_Fi$wordcount[i] <- countword
Sci_Fi$scifi.weight[i] <- Sci_Fi$wordcount[i]/sum(Sci_Fi$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[5]]))
Thriller<-  data.frame(words)
Thriller$isthriller <- 1
for (i in 1:nrow(Thriller)){
countword <- length(grep(Thriller$words[i],gen_key$keywords[[5]]))
Thriller$wordcount[i] <- countword
Thriller$thriller.weight[i] <- Thriller$wordcount[i]/sum(Thriller$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[6]]))
Romance<-  data.frame(words)
Romance$isromance <- 1
for (i in 1:nrow(Romance)){
countword <- length(grep(Romance$words[i],gen_key$keywords[[6]]))
Romance$wordcount[i] <- countword
Romance$romance.weight[i] <- Romance$wordcount[i]/sum(Romance$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[7]]))
Animation<-  data.frame(words)
Animation$isanimation <- 1
for (i in 1:nrow(Animation)){
countword <- length(grep(Animation$words[i],gen_key$keywords[[7]]))
Animation$wordcount[i] <- countword
Animation$animation.weight[i] <- Animation$wordcount[i]/sum(Animation$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[8]]))
Comedy<-  data.frame(words)
Comedy$iscomedy <- 1
for (i in 1:nrow(Comedy)){
countword <- length(grep(Comedy$words[i],gen_key$keywords[[8]]))
Comedy$wordcount[i] <- countword
Comedy$comedy.weight[i] <- Comedy$wordcount[i]/sum(Comedy$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[9]]))
Family<-  data.frame(words)
Family$isfamily <- 1
for (i in 1:nrow(Family)){
countword <- length(grep(Family$words[i],gen_key$keywords[[9]]))
Family$wordcount[i] <- countword
Family$family.weight[i] <- Family$wordcount[i]/sum(Family$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[10]]))
Musical<-  data.frame(words)
Musical$ismusical <- 1
for (i in 1:nrow(Musical)){
countword <- length(grep(Musical$words[i],gen_key$keywords[[10]]))
Musical$wordcount[i] <- countword
Musical$musical.weight[i] <- Musical$wordcount[i]/sum(Musical$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[11]]))
Mystery<-  data.frame(words)
Mystery$ismystery <- 1
for (i in 1:nrow(Mystery)){
countword <- length(grep(Mystery$words[i],gen_key$keywords[[11]]))
Mystery$wordcount[i] <- countword
Mystery$mystery.weight[i] <- Mystery$wordcount[i]/sum(Mystery$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[12]]))
Western<-  data.frame(words)
Western$iswestern <- 1
for (i in 1:nrow(Western)){
countword <- length(grep(Western$words[i],gen_key$keywords[[12]]))
Western$wordcount[i] <- countword
Western$western.weight[i] <- Western$wordcount[i]/sum(Western$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[13]]))
Drama<-  data.frame(words)
Drama$isdrama <- 1
for (i in 1:nrow(Drama)){
countword <- length(grep(Drama$words[i],gen_key$keywords[[13]]))
Drama$wordcount[i] <- countword
Drama$drama.weight[i] <- Drama$wordcount[i]/sum(Drama$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[14]]))
History<-  data.frame(words)
History$ishistory <- 1
for (i in 1:nrow(History)){
countword <- length(grep(History$words[i],gen_key$keywords[[14]]))
History$wordcount[i] <- countword
History$history.weight[i] <- History$wordcount[i]/sum(History$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[15]]))
Sport<-  data.frame(words)
Sport$issport <- 1
for (i in 1:nrow(Sport)){
countword <- length(grep(Sport$words[i],gen_key$keywords[[15]]))
Sport$wordcount[i] <- countword
Sport$sport.weight[i] <- Sport$wordcount[i]/sum(Sport$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[16]]))
Crime<-  data.frame(words)
Crime$iscrime <- 1
for (i in 1:nrow(Crime)){
countword <- length(grep(Crime$words[i],gen_key$keywords[[16]]))
Crime$wordcount[i] <- countword
Crime$crime.weight[i] <- Crime$wordcount[i]/sum(Crime$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[17]]))
Horror<-  data.frame(words)
Horror$ishorror <- 1
for (i in 1:nrow(Horror)){
countword <- length(grep(Horror$words[i],gen_key$keywords[[17]]))
Horror$wordcount[i] <- countword
Horror$horror.weight[i] <- Horror$wordcount[i]/sum(Horror$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[18]]))
War<-  data.frame(words)
War$iswar <- 1
for (i in 1:nrow(War)){
countword <- length(grep(War$words[i],gen_key$keywords[[18]]))
War$wordcount[i] <- countword
War$war.weight[i] <- War$wordcount[i]/sum(War$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[19]]))
Biography<-  data.frame(words)
Biography$isbio <- 1
for (i in 1:nrow(Biography)){
countword <- length(grep(Biography$words[i],gen_key$keywords[[19]]))
Biography$wordcount[i] <- countword
Biography$bio.weight[i] <- Biography$wordcount[i]/sum(Biography$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[20]]))
Music<-  data.frame(words)
Music$ismusic <- 1
for (i in 1:nrow(Music)){
countword <- length(grep(Music$words[i],gen_key$keywords[[20]]))
Music$wordcount[i] <- countword
Music$music.weight[i] <- Music$wordcount[i]/sum(Music$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[21]]))
Documentary<-  data.frame(words)
Documentary$isdoc <- 1
for (i in 1:nrow(Documentary)){
countword <- length(grep(Documentary$words[i],gen_key$keywords[[21]]))
Documentary$wordcount[i] <- countword
Documentary$doc.weight[i] <- Documentary$wordcount[i]/sum(Documentary$wordcount)
}
words<-  unique(unlist(gen_key$keywords[[22]]))
Short<-  data.frame(words)
Short$isshort <- 1
for (i in 1:nrow(Short)){
countword <- length(grep(Short$words[i],gen_key$keywords[[22]]))
Short$wordcount[i] <- countword
Short$short.weight[i] <- Short$wordcount[i]/sum(Short$wordcount)
}
#Using dplyr to merge multiple df by word weight
df.key.weight <- join_all(list(Action,Adventure,Animation,Biography, Comedy, Crime, Documentary,
Drama, Family, Fantasy, History, Horror, Music, Musical,
Mystery, Romance, Sci_Fi, Short, Sport, Thriller, War,
Western), by = "words", type = "full")
df.key.weight <- subset(df.key.weight, select = -c(wordcount))
#Using dplyr to merge multiple df by word count
df.key.count <- join_all(list(Action,Adventure,Animation,Biography, Comedy, Crime, Documentary,
Drama, Family, Fantasy, History, Horror, Music, Musical,
Mystery, Romance, Sci_Fi, Short, Sport, Thriller, War,
Western), by = "words", type = "full")
df.key.count <- subset(df.key.count, select = c(words, isaction, isadv, isanimation, isbio,
iscomedy,iscrime,isdoc,isdrama,isfamily,isfant,ishistory,
ishorror,ismusic,ismusical,ismystery,isromance,isscifi,
isshort,issport,isthriller,iswar,iswestern))
#Converting all NA to 0
df.key.count[is.na(df.key.count)] <- 0
#SUMMING UP MOVIE GENRE WEIGHT -------------------------------------------------------------------------
#Grabbing new set of df for movies
df.movie.weight <- dfraw
#Removing unnecessary data
df.movie.weight <- subset(df.movie.weight, !is.na(gross))
df.movie.weight <- subset(df.movie.weight, !is.na(duration))
df.movie.weight <- subset(df.movie.weight, !is.na(budget))
df.movie.weight <- subset(df.movie.weight, title_year >= 2000)
df.movie.weight <- df.movie.weight[!duplicated(df.movie.weight$movie_title),]
df.movie.weight <- subset(df.movie.weight, select = c(plot_keywords, movie_title))
#separating plot_keywords into a list
df.movie.weight$plot_keywords <- as.character(df.movie.weight$plot_keywords)
df.movie.weight$plot_keywords <- strsplit(df.movie.weight$plot_keywords,"|", fixed = T)
#initialising the weight columns for df.movie.weight
df.movie.weight[,colnames(df.key.weight)] <- 0
#changing words from factor to character
df.key.weight$words <- as.character(df.key.weight$words)
df.movieWeight <- df.raw
# Removing unnecessary data
df.movieWeight <- subset(df.movieWeight, !is.na(gross))
df.movieWeight <- subset(df.movieWeight, !is.na(duration))
df.movieWeight <- subset(df.movieWeight, !is.na(budget))
df.movieWeight <- subset(df.movieWeight, title_year >= 2000)
df.movieWeight <- df.movieWeight[!duplicated(df.movieWeight$movie_title),]
df.movieWeight <- subset(df.movieWeight, select = c(plot_keywords, movie_title))
# Separating plot keywords into a list
df.movieWeight$plot_keywords <- as.character(df.movieWeight$plot_keywords)
df.movieWeight$plot_keywords <- strsplit(df.movieWeight$plot_keywords,"|", fixed = T)
# Initialising the weight columns for df.movieWeight
df.movieWeight[,colnames(df.keyWeight)] <- 0
# Changing words from factor to character
df.keyWeight$words <- as.character(df.keyWeight$words)
# Joining all by key weight
df.keyWeight <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyWeight <- subset(df.keyWeight, select = -c(wordCount))
# Joining all by key weight
df.keyWeight <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyWeight <- subset(df.keyWeight, select = -c(wordCount))
keywordWeights <- data.frame(keywords = genreKeys$genres)
for (i in 1:nrow(genreKeys)) {
genreKeys$keywords[[i]] <- unique(genreKeys$keywords[[i]])
words <- unlist(genreKeys$keywords[[i]])
keywordWeights$wordList[[i]] <- data.frame(words, 1)
colnames(keywordWeights$wordList[[i]]) <- c("words",paste("is",keywordWeights$keywords[[i]],sep=""))
for (j in 1:nrow(keywordWeights$wordList[[i]])) {
countWord <- length(grep(keywordWeights$wordList[[i]]$words[j],genreKeys$keywords[[i]]))
keywordWeights$wordList[[i]]$wordCount[j] <- countWord
keywordWeights$wordList[[i]]$weight[j] <- keywordWeights$wordList[[i]]$wordCount[j]/sum(keywordWeights$wordList[[i]]$wordCount)
colnames(keywordWeights$wordList[[i]])[3]<- paste(keywordWeights$keywords[[i]],"Weight",sep="")
}
}
for (i in 1:nrow(genreKeys)) {
genreKeys$keywords[[i]] <- unique(genreKeys$keywords[[i]])
words <- unlist(genreKeys$keywords[[i]])
keywordWeights$wordList[[i]] <- data.frame(words, 1)
colnames(keywordWeights$wordList[[i]]) <- c("words",paste("is",keywordWeights$keywords[[i]],sep=""))
for (j in 1:nrow(keywordWeights$wordList[[i]])) {
countWord <- length(grep(keywordWeights$wordList[[i]]$words[j],genreKeys$keywords[[i]]))
keywordWeights$wordList[[i]]$wordCount[j] <- countWord
keywordWeights$wordList[[i]]$weight[j] <- keywordWeights$wordList[[i]]$wordCount[j]/sum(keywordWeights$wordList[[i]]$wordCount)
colnames(keywordWeights$wordList[[i]])[2]<- paste(keywordWeights$keywords[[i]],"Weight",sep="")
}
}
keywordWeights <- data.frame(keywords = genreKeys$genres)
for (i in 1:nrow(genreKeys)) {
genreKeys$keywords[[i]] <- unique(genreKeys$keywords[[i]])
words <- unlist(genreKeys$keywords[[i]])
keywordWeights$wordList[[i]] <- data.frame(words, 1)
colnames(keywordWeights$wordList[[i]]) <- c("words",paste("is",keywordWeights$keywords[[i]],sep=""))
for (j in 1:nrow(keywordWeights$wordList[[i]])) {
countWord <- length(grep(keywordWeights$wordList[[i]]$words[j],genreKeys$keywords[[i]]))
keywordWeights$wordList[[i]]$wordCount[j] <- countWord
keywordWeights$wordList[[i]]$weight[j] <- keywordWeights$wordList[[i]]$wordCount[j]/sum(keywordWeights$wordList[[i]]$wordCount)
colnames(keywordWeights$wordList[[i]])[4]<- paste(keywordWeights$keywords[[i]],"Weight",sep="")
}
}
keywordWeights <- data.frame(keywords = genreKeys$genres)
for (i in 1:nrow(genreKeys)) {
genreKeys$keywords[[i]] <- unique(genreKeys$keywords[[i]])
words <- unlist(genreKeys$keywords[[i]])
keywordWeights$wordList[[i]] <- data.frame(words, 1)
colnames(keywordWeights$wordList[[i]]) <- c("words",paste("is",keywordWeights$keywords[[i]],sep=""))
for (j in 1:nrow(keywordWeights$wordList[[i]])) {
countWord <- length(grep(keywordWeights$wordList[[i]]$words[j],genreKeys$keywords[[i]]))
keywordWeights$wordList[[i]]$wordCount[j] <- countWord
keywordWeights$wordList[[i]]$weight[j] <- keywordWeights$wordList[[i]]$wordCount[j]/sum(keywordWeights$wordList[[i]]$wordCount)
}
colnames(keywordWeights$wordList[[i]])[4]<- paste(keywordWeights$keywords[[i]],"Weight",sep="")
}
# Joining all by key weight
df.keyWeight <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyWeight <- subset(df.keyWeight, select = -c(wordCount))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,weight))
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep(df,keyCount,"Weight")))
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep(df.keyCount,"Weight")))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("Weight",df.keyCount)))
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("$Weight",df.keyCount)))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("$Weight",df.keyCount)))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("*Weight",df.keyCount)))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("Weight+",df.keyCount)))
grep("Weight+",df.keyCount)
grep("Weight",df.keyCount)
grep("Weight+",df.keyCount)
grep("Weight$",df.keyCount)
grep("Weight$",df.keyCount,value=TRUE)
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("Weight$",df.keyCount,Value=TRUE)))
df.keyCount
grep("\\Weight$",df.keyCount,Value=TRUE)
grep("\\Weight$",df.keyCount)
grep("Weight$",colnames(df.keyCount))
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("Weight$",colnames(df.keyCount))))
# Converting all NA to 0
df.keyCount[is.na(df.keyCount)] <- 0
# [Section 3A] Calculating sum of weights to determine dominant genre ========================
df.movieWeight <- df.raw
df.movieWeight <- subset(df.movieWeight, !is.na(gross))
df.movieWeight <- subset(df.movieWeight, !is.na(duration))
df.movieWeight <- subset(df.movieWeight, !is.na(budget))
df.movieWeight <- subset(df.movieWeight, title_year >= 2000)
df.movieWeight <- df.movieWeight[!duplicated(df.movieWeight$movie_title),]
df.movieWeight <- subset(df.movieWeight, select = c(plot_keywords, movie_title))
# Separating plot keywords into a list
df.movieWeight$plot_keywords <- as.character(df.movieWeight$plot_keywords)
df.movieWeight$plot_keywords <- strsplit(df.movieWeight$plot_keywords,"|", fixed = T)
# Initialising the weight columns for df.movieWeight
df.movieWeight[,colnames(df.keyWeight)] <- 0
# Changing words from factor to character
df.keyWeight$words <- as.character(df.keyWeight$words)
# Sum weights for each movie based on keywords
for (i in 1:nrow(df.movieWeight)){
if(lengths(df.movieWeight$plot_keywords[i]) == 0){
next
}
for (j in 1:lengths(df.movieWeight$plot_keywords[i])) {
for(k in 1:nrow(df.keyWeight)){
if(df.movieWeight$plot_keywords[[i]][j] == df.keyWeight[k,1]){
for(l in 1:(length(df.movieWeight)-3)){
df.movieWeight[i,(l+3)] <- df.movieWeight[i,(l+3)] + df.keyWeight[k,(l+1)]
}
break
}
}
}
}
# Choosing the highest column as the dominant genre
df.movieWeight.num <- subset(df.movieWeight, select = -c(plot_keywords, movie_title,words))
df.movieWeight$maxcol <- colnames(df.movieWeight.num)[apply(df.movieWeight.num,1,which.max)]
View(df.movieWeight)
# For Weight
df.movieWeight2 <- df.movieWeight
# For Weight
df.movieWeight2 <- df.movieWeight
df.movieWeight2$dominantGenre <- factor(df.movieWeight2$maxcol, labels = genres)
View(df.movieWeight)
# For Weight
df.movieWeight2 <- df.movieWeight
df.movieWeight2$dominantGenre <- factor(df.movieWeight2$maxcol, labels = genres)
# For Weight
df.movieWeight2 <- df.movieWeight
domGenLab <-  c("Action","Adventure","Animation","Biography","Comedy","Crime","Documentary","Drama",
"Family","Fantasy","History","Horror","Music","Musical","Mystery","Romance","SciFi",
"Sport","Thriller","War","Western")
df.movieWeight2$dominantGenre <- factor(df.movieWeight2$maxcol, labels = domGenLab)
#Choosing the highest column as the dominant genre
df.movie.weight.numeric <- subset(df.movie.weight, select = -c(plot_keywords, movie_title,words))
df.movie.weight$maxcol <- colnames(df.movie.weight.numeric)[apply(df.movie.weight.numeric,1,which.max)]
#to prevent rerunning the application (Weight)
df.movie.weight2 <- df.movie.weight
domGenLab <-  c("Action","Adventure","Animation","Biography","Comedy","Crime","Documentary","Drama",
"Family","Fantasy","History","Horror","Music","Musical","Mystery","Romance","SciFi",
"Sport","Thriller","War","Western")
df.movie.weight2$dominantGenre <- factor(df.movie.weight2$maxcol, labels = domGenLab)
df.movie.weight2$dominantGenre <- factor(df.movie.weight2$maxcol, labels = domGenLab)
View(df.movieWeight)
View(df.movie.weight)
# Joining all by key weight
df.keyWeight <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyWeight <- subset(df.keyWeight, select = -c(wordCount))
# Converting all NA to 0
df.keyWeight[is.na(df.keyWeight)] <- 0
# Choosing the highest column as the dominant genre
df.movieWeight.num <- subset(df.movieWeight, select = -c(plot_keywords, movie_title,words))
df.movieWeight$maxcol <- colnames(df.movieWeight.num)[apply(df.movieWeight.num,1,which.max)]
df.movieWeight <- subset(df.movieWeight, !is.na(gross))
df.movieWeight <- subset(df.movieWeight, !is.na(duration))
df.movieWeight <- subset(df.movieWeight, !is.na(budget))
df.movieWeight <- subset(df.movieWeight, title_year >= 2000)
df.movieWeight <- df.movieWeight[!duplicated(df.movieWeight$movie_title),]
df.movieWeight <- subset(df.movieWeight, select = c(plot_keywords, movie_title))
# Separating plot keywords into a list
df.movieWeight$plot_keywords <- as.character(df.movieWeight$plot_keywords)
df.movieWeight$plot_keywords <- strsplit(df.movieWeight$plot_keywords,"|", fixed = T)
# Initialising the weight columns for df.movieWeight
df.movieWeight[,colnames(df.keyWeight)] <- 0
# Changing words from factor to character
df.keyWeight$words <- as.character(df.keyWeight$words)
df.movieWeight <- subset(df.movieWeight, !is.na(gross))
df.movieWeight <- subset(df.movieWeight, !is.na(duration))
df.movieWeight <- subset(df.movieWeight, !is.na(budget))
df.movieWeight <- subset(df.movieWeight, title_year >= 2000)
df.movieWeight <- df.movieWeight[!duplicated(df.movieWeight$movie_title),]
df.movieWeight <- subset(df.movieWeight, select = c(plot_keywords, movie_title))
# Separating plot keywords into a list
df.movieWeight$plot_keywords <- as.character(df.movieWeight$plot_keywords)
df.movieWeight$plot_keywords <- strsplit(df.movieWeight$plot_keywords,"|", fixed = T)
# Initialising the weight columns for df.movieWeight
df.movieWeight[,colnames(df.keyWeight)] <- 0
# Changing words from factor to character
df.keyWeight$words <- as.character(df.keyWeight$words)
for (i in 1:nrow(df.movieWeight)){
if(lengths(df.movieWeight$plot_keywords[i]) == 0){
next
}
for (j in 1:lengths(df.movieWeight$plot_keywords[i])) {
for(k in 1:nrow(df.keyWeight)){
if(df.movieWeight$plot_keywords[[i]][j] == df.keyWeight[k,1]){
for(l in 1:(length(df.movieWeight)-3)){
df.movieWeight[i,(l+3)] <- df.movieWeight[i,(l+3)] + df.keyWeight[k,(l+1)]
}
break
}
}
}
}
# Choosing the highest column as the dominant genre
df.movieWeight.num <- subset(df.movieWeight, select = -c(plot_keywords, movie_title,words))
df.movieWeight$maxcol <- colnames(df.movieWeight.num)[apply(df.movieWeight.num,1,which.max)]
setwd("C:/Users/sogge/Desktop/CZ4032 Data Analytics and Minining/Dataset")
df.raw <- read.csv("movie_metadata.csv")
set.seed(1337)
# Initialise Libraries for data cleaning ======================================
library(plyr)
library(dplyr)
library(tidytext)
library(stringr)
# [Section 1] Genre Cleaning ==================================================
df.genres <- subset(df.raw, select = c(genres, plot_keywords))
# Splitting the movie genres
df.genres$genres <- as.character(df.genres$genres)
df.genres$genres <- strsplit(df.genres$genres, "|", fixed = T)
# Get a vector of unique genres
genres <- unlist(as.vector(df.genres$genres))
genres <- unique(genres)
# 26 unique genres
length(genres)
# Splitting the plot keywords, delimited by the pipe symbol |
df.genres$plotKeywords <- as.character(df.genres$plot_keywords)
df.genres$plotKeywords <- strsplit(df.genres$plotKeywords,"|", fixed = T)
keywords <- as.vector(df.genres$plotKeywords)
# 4761 unique keywords
length(unique(keywords))
genreKeys <- data.frame(genres)
genreKeys$keywords <- NA
# Scan through all keywords and assign the keyword to the genre if it is found in the movie with the genre specified
for(i in 1:nrow(df.genres)){
for(j in 1:nrow(genreKeys)){
if(grepl(genreKeys$genres[j],df.genres$genres[i])){
if(is.na(genreKeys$keywords[j])){
genreKeys$keywords[j]<- c(df.genres$plotKeywords[i])
}
else
genreKeys$keywords[[j]] <- c(genreKeys$keywords[[j]],df.genres$plotKeywords[[i]], recursive =T)
}
}
}
# [Section 2] Assigning weights to keywords ==================================================
# Keep only the unique keywords
keywordWeights <- data.frame(keywords = genreKeys$genres)
for (i in 1:nrow(genreKeys)) {
genreKeys$keywords[[i]] <- unique(genreKeys$keywords[[i]])
words <- unlist(genreKeys$keywords[[i]])
keywordWeights$wordList[[i]] <- data.frame(words, 1)
colnames(keywordWeights$wordList[[i]]) <- c("words",paste("is",keywordWeights$keywords[[i]],sep=""))
for (j in 1:nrow(keywordWeights$wordList[[i]])) {
countWord <- length(grep(keywordWeights$wordList[[i]]$words[j],genreKeys$keywords[[i]]))
keywordWeights$wordList[[i]]$wordCount[j] <- countWord
keywordWeights$wordList[[i]]$weight[j] <- keywordWeights$wordList[[i]]$wordCount[j]/sum(keywordWeights$wordList[[i]]$wordCount)
}
colnames(keywordWeights$wordList[[i]])[4]<- paste(keywordWeights$keywords[[i]],"Weight",sep="")
}
# Joining all by key weight
df.keyWeight <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyWeight <- subset(df.keyWeight, select = -c(wordCount))
# Converting all NA to 0
df.keyWeight[is.na(df.keyWeight)] <- 0
# Joining all by key count
df.keyCount <- join_all(keywordWeights$wordList, by = "words", type = "full")
df.keyCount <- subset(df.keyCount, select = -c(wordCount,grep("Weight$",colnames(df.keyCount))))
# Converting all NA to 0
df.keyCount[is.na(df.keyCount)] <- 0
# [Section 3A] Calculating sum of weights to determine dominant genre ========================
df.movieWeight <- df.raw
# Removing unnecessary data
df.movieWeight <- subset(df.movieWeight, !is.na(gross))
df.movieWeight <- subset(df.movieWeight, !is.na(duration))
df.movieWeight <- subset(df.movieWeight, !is.na(budget))
df.movieWeight <- subset(df.movieWeight, title_year >= 2000)
df.movieWeight <- df.movieWeight[!duplicated(df.movieWeight$movie_title),]
df.movieWeight <- subset(df.movieWeight, select = c(plot_keywords, movie_title))
# Separating plot keywords into a list
df.movieWeight$plot_keywords <- as.character(df.movieWeight$plot_keywords)
df.movieWeight$plot_keywords <- strsplit(df.movieWeight$plot_keywords,"|", fixed = T)
# Initialising the weight columns for df.movieWeight
df.movieWeight[,colnames(df.keyWeight)] <- 0
# Changing words from factor to character
df.keyWeight$words <- as.character(df.keyWeight$words)
# Sum weights for each movie based on keywords
for (i in 1:nrow(df.movieWeight)){
if(lengths(df.movieWeight$plot_keywords[i]) == 0){
next
}
for (j in 1:lengths(df.movieWeight$plot_keywords[i])) {
for(k in 1:nrow(df.keyWeight)){
if(df.movieWeight$plot_keywords[[i]][j] == df.keyWeight[k,1]){
for(m in 1:(length(df.movieWeight)-3)){
df.movieWeight[i,(m+3)] <- df.movieWeight[i,(m+3)] + df.keyWeight[k,(m+1)]
}
break
}
}
}
}
